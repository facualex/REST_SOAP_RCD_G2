{"version":3,"sources":["screens/App/index.js","index.js"],"names":["initialState","rut","dv","isLoading","App","useState","state","setState","a","prevState","cogoToast","error","fetch","process","method","headers","Accept","body","URLSearchParams","response","json","jsonResponse","data","success","console","log","useEffect","className","htmlFor","name","value","id","onChange","event","target","isNaN","autoComplete","disabled","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uQAIMA,EAAe,CACnBC,IAAK,GACLC,GAAI,GACJC,WAAW,GAkHEC,MA/Gf,WACE,MAA0BC,mBAASL,GAAnC,mBAAOM,EAAP,KAAcC,EAAd,KAEQN,EAAuBK,EAAvBL,IAAKC,EAAkBI,EAAlBJ,GAAIC,EAAcG,EAAdH,UAHJ,4CAyBb,8BAAAK,EAAA,kEAESP,EAFT,uBAGMM,GAAS,SAACE,GAAD,mBAAC,eACLA,GADI,IAEPP,GAAI,QALZ,kBAQaQ,IAAUC,MACf,+DATR,cAaIJ,GAAS,SAACE,GAAD,mBAAC,eACLA,GADI,IAEPP,GAAI,GACJC,WAAW,OAhBjB,SAmB2BS,MAAM,GAAD,OAAIC,yDAAJ,UAA2C,CACrEC,OAAQ,OACRC,QAAS,CACPC,OAAQ,oCACR,eAAgB,qCAElBC,KAAM,IAAIC,gBAAgB,CACxBjB,UA1BR,cAmBUkB,EAnBV,iBA8B+BA,EAASC,OA9BxC,aA8BUC,EA9BV,UAgCwBA,EAAaC,KAhCrC,wBAiCMf,GAAS,SAACE,GAAD,mBAAC,eACLA,GADI,IAEPP,GAAImB,EAAaC,KACjBnB,WAAW,OApCnB,kBAsCaO,IAAUa,QAAQ,+CAtC/B,0DAyCIhB,GAAS,SAACE,GAAD,mBAAC,eACLA,GADI,IAEPP,GAAI,GACJC,WAAW,OAGbO,IAAUC,MAAV,MACAa,QAAQC,IAAR,MAhDJ,2DAzBa,sBA6Eb,OAxEAC,qBAAU,WACRnB,GAAS,SAACE,GAAD,mBAAC,eACLA,GADI,IAEPP,GAAI,UAEL,CAACD,IAoEF,sBAAK0B,UAAU,YAAf,UACE,qBAAKA,UAAU,SAAf,SACE,oBAAIA,UAAU,eAAd,iDAEF,sBAAKA,UAAU,wBAAf,UACE,sBAAKA,UAAU,cAAf,UACE,sBAAKA,UAAU,iBAAf,UACE,wBAAOC,QAAQ,WAAf,gBAEE,sBAAMD,UAAU,cAAhB,yCAEF,uBACEE,KAAK,MACLC,MAAO7B,EACP0B,UAAU,WACVI,GAAG,WACHC,SAlFZ,SAAgBC,GACd,IAAQH,EAAUG,EAAMC,OAAhBJ,MAEM,OAAVA,GAAkBK,MAAML,IAI5BvB,GAAS,SAACE,GAAD,mBAAC,eACLA,GADI,IAEPR,IAAK6B,QA0EGM,aAAa,WAGjB,sBAAKT,UAAU,WAAf,UACE,uBAAOC,QAAQ,KAAf,gBACA,uBAAOD,UAAU,KAAKI,GAAG,KAAKD,MAAO5B,EAAImC,UAAQ,UAGrD,wBAAQV,UAAU,mBAAmBW,QAvG9B,2CAuGP,SACGnC,EAAY,cAAgB,uBC7GvCoC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.4360b08f.chunk.js","sourcesContent":["import cogoToast from \"cogo-toast\";\nimport { useEffect, useState } from \"react\";\nimport \"./index.css\";\n\nconst initialState = {\n  rut: \"\",\n  dv: \"\",\n  isLoading: false,\n};\n\nfunction App() {\n  const [state, setState] = useState(initialState);\n\n  const { rut, dv, isLoading } = state;\n\n  useEffect(() => {\n    setState((prevState) => ({\n      ...prevState,\n      dv: \"\",\n    }));\n  }, [rut]);\n\n  function setRut(event) {\n    const { value } = event.target;\n\n    if (value !== null && isNaN(value)) {\n      return;\n    }\n\n    setState((prevState) => ({\n      ...prevState,\n      rut: value,\n    }));\n  }\n\n  async function handleCalculateClick() {\n    try {\n      if (!rut) {\n        setState((prevState) => ({\n          ...prevState,\n          dv: \"\",\n        }));\n\n        return cogoToast.error(\n          \"Debes ingresar un rut para calcular el digito verificador.\"\n        );\n      }\n\n      setState((prevState) => ({\n        ...prevState,\n        dv: \"\",\n        isLoading: true,\n      }));\n\n      const response = await fetch(`${process.env.REACT_APP_API_URI}/getDv`, {\n        method: \"post\",\n        headers: {\n          Accept: \"application/x-www-form-urlencoded\",\n          \"Content-Type\": \"application/x-www-form-urlencoded\",\n        },\n        body: new URLSearchParams({\n          rut,\n        })\n      });\n\n      const jsonResponse = await response.json();\n\n      if (jsonResponse && jsonResponse.data) {\n        setState((prevState) => ({\n          ...prevState,\n          dv: jsonResponse.data,\n          isLoading: false,\n        }));\n        return cogoToast.success(\"Digito verificador calculado con Ã©xito!\");\n      }\n    } catch (error) {\n      setState((prevState) => ({\n        ...prevState,\n        dv: \"\",\n        isLoading: false,\n      }));\n\n      cogoToast.error(error);\n      console.log(error);\n    }\n  }\n\n  return (\n    <div className=\"container\">\n      <div className=\"header\">\n        <h1 className=\"header__text\">Calculadora de digito verificador</h1>\n      </div>\n      <div className=\"input-group-container\">\n        <div className=\"input-group\">\n          <div className=\"main-rut-group\">\n            <label htmlFor=\"main-rut\">\n              RUT\n              <span className=\"sin-dv-span\">(sin digito verificador)</span>\n            </label>\n            <input\n              name=\"rut\"\n              value={rut}\n              className=\"main-rut\"\n              id=\"main-rut\"\n              onChange={setRut}\n              autoComplete=\"off\"\n            />\n          </div>\n          <div className=\"dv-group\">\n            <label htmlFor=\"dv\">DV</label>\n            <input className=\"dv\" id=\"dv\" value={dv} disabled />\n          </div>\n        </div>\n        <button className=\"calculate-button\" onClick={handleCalculateClick}>\n          {isLoading ? \"Cargando...\" : \"Calcular DV\"}\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './screens';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}