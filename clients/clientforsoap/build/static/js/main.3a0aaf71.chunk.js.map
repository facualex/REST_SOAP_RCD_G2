{"version":3,"sources":["screens/App/index.js","index.js"],"names":["initialState","namesInput","names","lastNames","isLoading","App","useState","state","setState","xmlRequest","a","prevState","cogoToast","error","split","filter","name","length","axios","post","process","headers","response","parsedXMLResponse","XMLParser","parseFromString","data","console","log","dv","className","htmlFor","placeholder","value","id","onChange","event","target","autoComplete","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2SAMMA,EAAe,CACnBC,WAAY,GACZC,MAAO,GACPC,UAAW,GACXC,WAAW,GAuHEC,MApHf,WACE,MAA0BC,mBAASN,GAAnC,mBAAOO,EAAP,KAAcC,EAAd,KAEQP,EAA4CM,EAA5CN,WAA8BG,GAAcG,EAAhCL,MAAgCK,EAAzBJ,UAAyBI,EAAdH,WAElCK,EAAU,iKAIIR,EAJJ,qEALD,4CAwBb,8BAAAS,EAAA,kEAEST,EAFT,uBAGMO,GAAS,SAACG,GAAD,mBAAC,eACLA,GADI,IAEPV,WAAY,QALpB,kBAQaW,IAAUC,MACf,+DATR,YAcQZ,EAAWa,MAAM,KAAKC,QAAO,SAAAC,GAAI,OAAIA,KAAMC,OAAS,GAd5D,uBAeMT,GAAS,SAACG,GAAD,mBAAC,eACLA,GADI,IAEPV,WAAY,QAjBpB,kBAoBaW,IAAUC,MACf,4EArBR,cAyBIL,GAAS,SAACG,GAAD,mBAAC,eACLA,GADI,IAEPP,WAAW,OA3BjB,UA4C2Bc,IAAMC,KAAN,UAAcC,gDAAd,SAAoDX,EAAY,CACrFY,QAAS,CAAE,eAAgB,cA7CjC,QA4CUC,EA5CV,OAgDUC,GAAoB,IAAIC,KAAYC,gBAAgBH,EAASI,MACnEC,QAAQC,IAAIN,EAASI,MACrBC,QAAQC,IAAIL,GAlDhB,kDAqDIf,GAAS,SAACG,GAAD,mBAAC,eACLA,GADI,IAEPkB,GAAI,GACJzB,WAAW,OAGbQ,IAAUC,MAAV,MACAc,QAAQC,IAAR,MA5DJ,2DAxBa,sBAwFb,OACE,sBAAKE,UAAU,YAAf,UACE,qBAAKA,UAAU,SAAf,SACE,oBAAIA,UAAU,eAAd,4CAEF,sBAAKA,UAAU,wBAAf,UACE,qBAAKA,UAAU,cAAf,SACE,sBAAKA,UAAU,iBAAf,UACE,uBAAOC,QAAQ,WAAf,yCACA,uBACEf,KAAK,MACLgB,YAAY,4CACZC,MAAOhC,EACP6B,UAAU,WACVI,GAAG,WACHC,SAxFZ,SAAkBC,GAChB,IAAQH,EAAUG,EAAMC,OAAhBJ,MAERzB,GAAS,SAACG,GAAD,mBAAC,eACLA,GADI,IAEPV,WAAYgC,QAoFJK,aAAa,aAInB,wBAAQR,UAAU,mBAAmBS,QA5G9B,2CA4GP,SACGnC,EAAY,cAAgB,0BCrHvCoC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.3a0aaf71.chunk.js","sourcesContent":["import cogoToast from \"cogo-toast\";\r\nimport { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport XMLParser from 'react-xml-parser';\r\nimport \"./index.css\";\r\n\r\nconst initialState = {\r\n  namesInput: \"\",\r\n  names: \"\",\r\n  lastNames: \"\",\r\n  isLoading: false,\r\n};\r\n\r\nfunction App() {\r\n  const [state, setState] = useState(initialState);\r\n\r\n  const { namesInput, names, lastNames, isLoading } = state;\r\n\r\n  let xmlRequest = `\r\n    <Envelope xmlns=\"http://schemas.xmlsoap.org/soap/envelope/\">\r\n    <Body>\r\n        <splitNames xmlns=\"names:namesservicewsdl\">\r\n            <name>${namesInput}</name>\r\n        </splitNames>\r\n     </Body>\r\n    </Envelope>\r\n  `;\r\n\r\n  function setField(event) {\r\n    const { value } = event.target;\r\n\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      namesInput: value,\r\n    }));\r\n  }\r\n\r\n  async function handleSplitClick() {\r\n    try {\r\n      if (!namesInput) {\r\n        setState((prevState) => ({\r\n          ...prevState,\r\n          namesInput: \"\",\r\n        }));\r\n\r\n        return cogoToast.error(\r\n          \"Debes ingresar nombres y apellidos para realizar el split.\"\r\n        );\r\n      }\r\n\r\n      // Valida que se ingrese al menos un nombre y apellido paterno y materno\r\n      if (namesInput.split(\" \").filter(name => name).length < 3) {\r\n        setState((prevState) => ({\r\n          ...prevState,\r\n          namesInput: \"\",\r\n        }));\r\n\r\n        return cogoToast.error(\r\n          \"Debes ingresar al menos un nombre, apellido paterno y apellido materno.\"\r\n        );\r\n      }\r\n\r\n      setState((prevState) => ({\r\n        ...prevState,\r\n        isLoading: true,\r\n      }));\r\n\r\n      // const response = await fetch(\r\n      // `${process.env.REACT_APP_API_URI}/getDv.php/${rut}`\r\n      //);\r\n      //const jsonResponse = await response.json();\r\n\r\n      //if (jsonResponse && jsonResponse.data) {\r\n      //  setState((prevState) => ({\r\n      //    ...prevState,\r\n      //    dv: jsonResponse.data,\r\n      //    isLoading: false,\r\n      //  }));\r\n      //  return cogoToast.success(\"Digito verificador calculado con éxito!\");\r\n      // }\r\n\r\n      const response = await axios.post(`${process.env.REACT_APP_API_URI}?wsdl`, xmlRequest, {\r\n        headers: { \"Content-Type\": \"text/xml\" }\r\n      })\r\n\r\n      const parsedXMLResponse = new XMLParser().parseFromString(response.data);\r\n      console.log(response.data)\r\n      console.log(parsedXMLResponse)\r\n\r\n    } catch (error) {\r\n      setState((prevState) => ({\r\n        ...prevState,\r\n        dv: \"\",\r\n        isLoading: false,\r\n      }));\r\n\r\n      cogoToast.error(error);\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"header\">\r\n        <h1 className=\"header__text\">Split de nombres y apellidos</h1>\r\n      </div>\r\n      <div className=\"input-group-container\">\r\n        <div className=\"input-group\">\r\n          <div className=\"main-rut-group\">\r\n            <label htmlFor=\"main-rut\">Ingrese nombres y apellidos</label>\r\n            <input\r\n              name=\"rut\"\r\n              placeholder=\"Ejemplo: Juan José Rodriguez Hernandez\"\r\n              value={namesInput}\r\n              className=\"main-rut\"\r\n              id=\"main-rut\"\r\n              onChange={setField}\r\n              autoComplete=\"off\"\r\n            />\r\n          </div>\r\n        </div>\r\n        <button className=\"calculate-button\" onClick={handleSplitClick}>\r\n          {isLoading ? \"Cargando...\" : \"Realizar Split\"}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './screens/App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}