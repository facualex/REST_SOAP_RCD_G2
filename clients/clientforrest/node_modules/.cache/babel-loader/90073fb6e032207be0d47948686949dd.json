{"ast":null,"code":"function clean(rut) {\n  return typeof rut === 'string' ? rut.replace(/^0+|[^0-9kK]+/g, '').toUpperCase() : '';\n}\n\nfunction validate(rut) {\n  if (typeof rut !== 'string') {\n    return false;\n  } // if it starts with 0 we return false\n  // so a rut like 00000000-0 will not pass\n\n\n  if (/^0+/.test(rut)) {\n    return false;\n  }\n\n  if (!/^0*(\\d{1,3}(\\.?\\d{3})*)-?([\\dkK])$/.test(rut)) {\n    return false;\n  }\n\n  rut = clean(rut);\n  let t = parseInt(rut.slice(0, -1), 10);\n  let m = 0;\n  let s = 1;\n\n  while (t > 0) {\n    s = (s + t % 10 * (9 - m++ % 6)) % 11;\n    t = Math.floor(t / 10);\n  }\n\n  const v = s > 0 ? '' + (s - 1) : 'K';\n  return v === rut.slice(-1);\n}\n\nfunction format(rut) {\n  rut = clean(rut);\n  let result = rut.slice(-4, -1) + '-' + rut.substr(rut.length - 1);\n\n  for (let i = 4; i < rut.length; i += 3) {\n    result = rut.slice(-3 - i, -i) + '.' + result;\n  }\n\n  return result;\n}\n\nfunction getCheckDigit(input) {\n  const rut = Array.from(clean(input), Number);\n\n  if (rut.length === 0 || rut.includes(NaN)) {\n    throw new Error(`\"${input}\" as RUT is invalid`);\n  }\n\n  const modulus = 11;\n  const initialValue = 0;\n  const sumResult = rut.reverse().reduce((accumulator, currentValue, index) => accumulator + currentValue * (index % 6 + 2), initialValue);\n  const checkDigit = modulus - sumResult % modulus;\n\n  if (checkDigit === 10) {\n    return 'K';\n  } else if (checkDigit === 11) {\n    return '0';\n  } else {\n    return checkDigit.toString();\n  }\n}\n\nmodule.exports = {\n  validate,\n  clean,\n  format,\n  getCheckDigit\n};","map":{"version":3,"sources":["/Users/facualex/Documents/development/universidad/REST_SOAP_RCD_G2/clients/clientforrest/node_modules/rut.js/index.js"],"names":["clean","rut","replace","toUpperCase","validate","test","t","parseInt","slice","m","s","Math","floor","v","format","result","substr","length","i","getCheckDigit","input","Array","from","Number","includes","NaN","Error","modulus","initialValue","sumResult","reverse","reduce","accumulator","currentValue","index","checkDigit","toString","module","exports"],"mappings":"AAAA,SAASA,KAAT,CAAgBC,GAAhB,EAAqB;AACnB,SAAO,OAAOA,GAAP,KAAe,QAAf,GACHA,GAAG,CAACC,OAAJ,CAAY,gBAAZ,EAA8B,EAA9B,EAAkCC,WAAlC,EADG,GAEH,EAFJ;AAGD;;AAED,SAASC,QAAT,CAAmBH,GAAnB,EAAwB;AACtB,MAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;AAC3B,WAAO,KAAP;AACD,GAHqB,CAKtB;AACA;;;AACA,MAAI,MAAMI,IAAN,CAAWJ,GAAX,CAAJ,EAAqB;AACnB,WAAO,KAAP;AACD;;AAED,MAAI,CAAC,qCAAqCI,IAArC,CAA0CJ,GAA1C,CAAL,EAAqD;AACnD,WAAO,KAAP;AACD;;AAEDA,EAAAA,GAAG,GAAGD,KAAK,CAACC,GAAD,CAAX;AAEA,MAAIK,CAAC,GAAGC,QAAQ,CAACN,GAAG,CAACO,KAAJ,CAAU,CAAV,EAAa,CAAC,CAAd,CAAD,EAAmB,EAAnB,CAAhB;AACA,MAAIC,CAAC,GAAG,CAAR;AACA,MAAIC,CAAC,GAAG,CAAR;;AAEA,SAAOJ,CAAC,GAAG,CAAX,EAAc;AACZI,IAAAA,CAAC,GAAG,CAACA,CAAC,GAAIJ,CAAC,GAAG,EAAL,IAAY,IAAKG,CAAC,KAAK,CAAvB,CAAL,IAAmC,EAAvC;AACAH,IAAAA,CAAC,GAAGK,IAAI,CAACC,KAAL,CAAWN,CAAC,GAAG,EAAf,CAAJ;AACD;;AAED,QAAMO,CAAC,GAAGH,CAAC,GAAG,CAAJ,GAAQ,MAAMA,CAAC,GAAG,CAAV,CAAR,GAAuB,GAAjC;AACA,SAAOG,CAAC,KAAKZ,GAAG,CAACO,KAAJ,CAAU,CAAC,CAAX,CAAb;AACD;;AAED,SAASM,MAAT,CAAiBb,GAAjB,EAAsB;AACpBA,EAAAA,GAAG,GAAGD,KAAK,CAACC,GAAD,CAAX;AAEA,MAAIc,MAAM,GAAGd,GAAG,CAACO,KAAJ,CAAU,CAAC,CAAX,EAAc,CAAC,CAAf,IAAoB,GAApB,GAA0BP,GAAG,CAACe,MAAJ,CAAWf,GAAG,CAACgB,MAAJ,GAAa,CAAxB,CAAvC;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGjB,GAAG,CAACgB,MAAxB,EAAgCC,CAAC,IAAI,CAArC,EAAwC;AACtCH,IAAAA,MAAM,GAAGd,GAAG,CAACO,KAAJ,CAAU,CAAC,CAAD,GAAKU,CAAf,EAAkB,CAACA,CAAnB,IAAwB,GAAxB,GAA8BH,MAAvC;AACD;;AAED,SAAOA,MAAP;AACD;;AAED,SAASI,aAAT,CAAwBC,KAAxB,EAA+B;AAC7B,QAAMnB,GAAG,GAAGoB,KAAK,CAACC,IAAN,CAAWtB,KAAK,CAACoB,KAAD,CAAhB,EAAyBG,MAAzB,CAAZ;;AAEA,MAAItB,GAAG,CAACgB,MAAJ,KAAe,CAAf,IAAoBhB,GAAG,CAACuB,QAAJ,CAAaC,GAAb,CAAxB,EAA2C;AACzC,UAAM,IAAIC,KAAJ,CAAW,IAAGN,KAAM,qBAApB,CAAN;AACD;;AAED,QAAMO,OAAO,GAAG,EAAhB;AACA,QAAMC,YAAY,GAAG,CAArB;AACA,QAAMC,SAAS,GAAG5B,GAAG,CAClB6B,OADe,GAEfC,MAFe,CAGd,CAACC,WAAD,EAAcC,YAAd,EAA4BC,KAA5B,KACEF,WAAW,GAAGC,YAAY,IAAKC,KAAK,GAAG,CAAT,GAAc,CAAlB,CAJd,EAKdN,YALc,CAAlB;AAQA,QAAMO,UAAU,GAAGR,OAAO,GAAIE,SAAS,GAAGF,OAA1C;;AAEA,MAAIQ,UAAU,KAAK,EAAnB,EAAuB;AACrB,WAAO,GAAP;AACD,GAFD,MAEO,IAAIA,UAAU,KAAK,EAAnB,EAAuB;AAC5B,WAAO,GAAP;AACD,GAFM,MAEA;AACL,WAAOA,UAAU,CAACC,QAAX,EAAP;AACD;AACF;;AAEDC,MAAM,CAACC,OAAP,GAAiB;AAAElC,EAAAA,QAAF;AAAYJ,EAAAA,KAAZ;AAAmBc,EAAAA,MAAnB;AAA2BK,EAAAA;AAA3B,CAAjB","sourcesContent":["function clean (rut) {\n  return typeof rut === 'string'\n    ? rut.replace(/^0+|[^0-9kK]+/g, '').toUpperCase()\n    : ''\n}\n\nfunction validate (rut) {\n  if (typeof rut !== 'string') {\n    return false\n  }\n\n  // if it starts with 0 we return false\n  // so a rut like 00000000-0 will not pass\n  if (/^0+/.test(rut)) {\n    return false\n  }\n\n  if (!/^0*(\\d{1,3}(\\.?\\d{3})*)-?([\\dkK])$/.test(rut)) {\n    return false\n  }\n\n  rut = clean(rut)\n\n  let t = parseInt(rut.slice(0, -1), 10)\n  let m = 0\n  let s = 1\n\n  while (t > 0) {\n    s = (s + (t % 10) * (9 - (m++ % 6))) % 11\n    t = Math.floor(t / 10)\n  }\n\n  const v = s > 0 ? '' + (s - 1) : 'K'\n  return v === rut.slice(-1)\n}\n\nfunction format (rut) {\n  rut = clean(rut)\n\n  let result = rut.slice(-4, -1) + '-' + rut.substr(rut.length - 1)\n  for (let i = 4; i < rut.length; i += 3) {\n    result = rut.slice(-3 - i, -i) + '.' + result\n  }\n\n  return result\n}\n\nfunction getCheckDigit (input) {\n  const rut = Array.from(clean(input), Number)\n\n  if (rut.length === 0 || rut.includes(NaN)) {\n    throw new Error(`\"${input}\" as RUT is invalid`)\n  }\n\n  const modulus = 11\n  const initialValue = 0\n  const sumResult = rut\n    .reverse()\n    .reduce(\n      (accumulator, currentValue, index) =>\n        accumulator + currentValue * ((index % 6) + 2),\n      initialValue\n    )\n\n  const checkDigit = modulus - (sumResult % modulus)\n\n  if (checkDigit === 10) {\n    return 'K'\n  } else if (checkDigit === 11) {\n    return '0'\n  } else {\n    return checkDigit.toString()\n  }\n}\n\nmodule.exports = { validate, clean, format, getCheckDigit }\n"]},"metadata":{},"sourceType":"script"}